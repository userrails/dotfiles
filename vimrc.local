set nocompatible

" Encoding
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8

set ffs=unix,dos,mac

" set auto indent
set autoindent

" auto change directory
" set autochdir

" File indentation
set tabstop=2
set shiftwidth=2
set expandtab     " use space not tab
set autoindent

" Remap leader key
let mapleader = " "

" Enable hidden buffers
set hidden

" searching
set ignorecase                    " ignore case in search
set hlsearch                      " highlight all search matches
set cursorline                    " highlight current line
set smartcase                     " pay attention to case when caps are used

" fast terminal connection
set ttyfast

" enable visual bell (disable audio bell)
set vb

" reload file changed outside vim
set autoread

" COMMON EDITOR SETTINGS
set relativenumber                " show relative line numbers
set number                        " also show current line number
set showmatch                     " highlight matching brackets
set scrolloff=2                   " minimum lines above/below cursor
set clipboard=unnamed             " use the system clipboard

" Code folding
set foldmethod=indent
set foldnestmax=10
set nofoldenable                  " disable code folding
set foldlevel=2

" decrease timeout for faster insert with 'O'
set timeoutlen=500

set lazyredraw

" http://webpack.github.io/docs/webpack-dev-server.html#working-with-editors-ides-supporting-safe-write
set backupcopy=yes

" hint to keep lines short
if exists('+colorcolumn')
  set colorcolumn=80
endif

" " Auto resize Vim splits to active split
" set winwidth=104
" set winheight=5
" set winminheight=5
" set winheight=999

" Enable mouse
set mouse=n
set ttymouse=xterm2

" mustache/handlebars
let g:mustache_abbreviations = 1

" Remove trailing whitespace on save
" au BufWritePre *.rb :%s/\s\+$//e
" au BufWritePre *.html :%s/\s\+$//e
" au BufWritePre *.js :%s/\s\+$//e
au BufWritePre *.jsx :%s/\s\+$//e
au BufWritePre *.json :%s/\s\+$//e

au BufWritePre *.md set nowrap textwidth=0

" Ale
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 0
" ale - prettier configuration
let g:ale_fixers = {}
let g:ale_fixers['javascript'] = ['prettier']
let g:ale_fix_on_save = 1
let g:ale_javascript_prettier_options = '--single-quote --trailing-comma es5'
" Run manually
nnoremap gp :silent %!prettier --stdin --trailing-comma all --single-quote<CR>

" vim-ragtag
let g:ragtag_global_maps = 1

" *****************************************************************************
" THEME
" *****************************************************************************

" set dark background and color scheme
set background=dark
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif

" highlight trailing spaces in annoying red
highlight ExtraWhitespace ctermbg=1 guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()
autocmd BufRead,BufNewFile *.vue setlocal filetype=vue.html.javascript.css

set foldmethod=syntax

" AIRLINE
" Enable the list of buffers
" let g:airline#extensions#tabline#enabled = 1
" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline_theme='jellybeans'

" IndentLine
let g:indentLine_enabled = 1
let g:indentLine_concealcursor = 0
let g:indentLine_color_term = 239
let g:indentLine_faster = 1

" *****************************************************************************
" SEARCH, FUZZY FIND AND CONFIGURATIONS
" *****************************************************************************

" set ack as grep
set grepprg=ack

" using CTRLP config
let g:ctrlp_map = '<leader>f'
let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist|bower_components)|(\.(swp|tox|ico|git|hg|svn))$'
let g:ctrlp_use_caching = 1
let g:ctrlp_max_height = 30
let g:ctrlp_working_path_mode = 0
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_open_new_file = 'r'
let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
" USE SILVER SEARCHER FOR CTRLP
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

" in-built fuzzy find
set path+=**                                  " :find file inside recursive directory
set wildmenu                                  " enable bash style tab completion
set wildmode=list:longest,full
set wildignore+=**/bower_components/*,**/node_modules/*,**/tmp/*,**/assets/images/*,**/assets/fonts/*,**/public/images/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite

" JSX
let g:user_emmet_settings = {
\  'javascript.jsx' : {
\      'extends' : 'jsx',
\  },
\}
" vim-closetag
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.erb,*.jsx,*.js"
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx,*.erb,*.js'
let g:closetag_emptyTags_caseSensitive = 1
let g:closetag_shortcut = '>'
let g:closetag_close_shortcut = '<leader>>'

" NERDTree configurations
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
map <C-\> :NERDTreeToggle<CR>
noremap <Leader>0 :NERDTreeFocus<CR>

" auto format tabularize in insert mode
if exists(":Tabularize")
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <Leader>a: :Tabularize /:\zs<CR>
  vmap <Leader>a: :Tabularize /:\zs<CR>
endif

" auto align tabularize
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

" *********************************************************
" BINDINGS
" *********************************************************

" map git commands
map <leader>ga :Gwrite<cr>
map <leader>gb :Gblame<cr>
map <leader>gc :Gcommit<cr>
map <leader>gd :!clear && git diff %<cr>
map <leader>gg :!clear && git add -A<cr>
map <leader>gl :!clear && git log -p %<cr>
map <leader>gs :Gstatus<cr>

" map Silver Searcher
map <leader>a :Ag!<space>

" clear the command line and search highlighting
" BUG: it is entering to insert mode automatically
" noremap <esc> :nohl<return><esc>

" toggle spell check with <F5>
map <F5> :setlocal spell! spelllang=en_us<cr>
imap <F5> <ESC>:setlocal spell! spelllang=en_us<cr>

" rename current file, via Gary Bernhardt
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'))
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <leader>n :call RenameFile()<cr>

" vim-test plugin
nmap <silent> <leader>s :TestNearest<CR>
nmap <silent> <leader>t :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>r :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>
let test#strategy = "vimux"

" Use enter to create new lines w/o entering insert mode
nnoremap <CR> o<Esc>

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" bind \ (backward slash) to grep shortcut
command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap \ :Ag<SPACE>

" Ag will search from project root
let g:ag_working_path_mode="r"

noremap <leader>l :bn<CR>
noremap <leader>h :bp<CR>

" Working with tabs
nnoremap th :tabfirst<CR>
nnoremap tj :tabprev<CR>
nnoremap tk :tabnext<CR>
nnoremap tl :tablast<CR>
nnoremap tt :tabedit<Space>
nnoremap tn :tabnext<Space>
nnoremap tm :tabm<Space>
nnoremap td :tabclose<CR>

" Close current buffer
nnoremap <leader>q :bp<cr>:bd #<cr>

" Open current line on GitHub
noremap ,o :!echo `git url`/blob/`git rev-parse --abbrev-ref HEAD`/%\#L<C-R>=line('.')<CR> \| xargs open<CR><CR>

" Re-indent everything, set cursor back to current line
noremap <C-=> gg=G''

nmap <silent> <F5> :! open %<CR>

" Vim surround to generate rails tag
let g:surround_45 = "<% \r %>"
let g:surround_61 = "<%= \r %>"

" Vimux
map <silent> <leader>vp :VimuxPromptCommand<CR>

" Get off my lawn
" also from insert mode
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" create/open file in current folder
map <Leader>ee :e <C-R>=escape(expand("%:p:h"),' ') . '/'<CR>

" Pretty print JSON
nnoremap <Leader>pp :%!python -m json.tool<CR>

" YouCompleteMe + Ultisnips
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:SuperTabDefaultCompletionType = 'context'
let g:SuperTabContextDefaultCompletionType = "<c-x><c-o>"
let g:SuperTabClosePreviewOnPopupClose = 1

" if filereadable($HOME . "/.vimrc.omnisharp")
"   " source ~/.vimrc.omnisharp
" endif

" enable syntastic only when I write file
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 1
